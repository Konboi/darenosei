# -*- coding: utf-8 -*-
RAILS_ROOT     = "#{File.dirname(__FILE__)}/.." unless defined?(RAILS_ROOT)
$unicorn_user  = `ls -l #{File.dirname(__FILE__)}/.. | awk 'END{print $3}'`.chomp # slaveの実行ユーザ
$unicorn_group = `ls -l #{File.dirname(__FILE__)}/.. | awk 'END{print $4}'`.chomp # slaveの実行グループ


# ---- start of config ----

# タイムアウト秒数。タイムアウトしたslaveは再起動される
$timeout = 60

# String => UNIX domain socket / FixNum => TCP socket
$listen = "unix:#{RAILS_ROOT}/tmp/sockets/unicorn.sock"
# $listen = 3000

# ---- end of config ----


# Main Config for Unicorn
worker_processes 6
preload_app true
timeout $timeout
listen $listen

stderr_path "#{RAILS_ROOT}/log/unicorn.log"
stdout_path "#{RAILS_ROOT}/log/unicorn.log"

# Add MIME TYPE 
::Rack::Mime::MIME_TYPES.merge!({".pnz" => "image/png", ".jpz" => "image/jpeg"})

# For RubyEnterpriseEdition: http://www.rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = ENV['RAILS_ENV'] == 'production' ? '/home/ec2-user/apps/prod/current/Gemfile' : RAILS_ROOT + '/Gemfile' 
end

# workerをフォークする前の処理
before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!

  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.

  old_pid = RAILS_ROOT + '/tmp/pids/unicorn.pid.oldbin'
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      # 古いマスターがいたら死んでもらう
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end


# workerをフォークしたあとの処理
after_fork do |server, worker|
  ##
  # Unicorn master loads the app then forks off workers - because of the way
  # Unix forking works, we need to make sure we aren't using any of the parent's
  # sockets, e.g. db connection

  ActiveRecord::Base.establish_connection
  #CHIMNEY.client.connect_to_server
  # Redis and Memcached would go here but their connections are established
  # on demand, so the master never opens a socket

  ##
  # Unicorn master is started as root, which is fine, but let's
  # drop the workers to git:git

  begin
    uid, gid = Process.euid, Process.egid
    user, group = $unicorn_user, $unicorn_group
    target_uid = Etc.getpwnam(user).uid
    target_gid = Etc.getgrnam(group).gid
    worker.tmp.chown(target_uid, target_gid)
    if uid != target_uid || gid != target_gid
      Process.initgroups(user, target_gid)
      Process::GID.change_privilege(target_gid)
      Process::UID.change_privilege(target_uid)
    end
  rescue => e
    if ENV['RAILS_ENV'] == 'development'
      STDERR.puts "couldn't change user, oh well"
    else
      raise e
    end
  end
end

